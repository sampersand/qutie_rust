#[include(*Builtins, *Operators, *Plugins)]
#[exclude_glbl(if, while)]
#[exclude(if, while)]
import('opers.qt', true) 
i = 0;
while { i < 10 } do {
   disp("i =", i);
   i = i + 1;
};

stop(0);

factor = func(inp){
   ret = [ ];
   ret.(inp + 1) = null;
   i = 2;
   while({ 1 < inp },{
      if(inp % i == 0, {
         ret.i? = (ret.i? || 0) + 1;
         inp = inp / i;
      }, {
         i = i + 1;
      })
   })
   ret
};

stop(0);
min = func(a, b){
   if(a < b, a, b)
};

factor_out = func(a, b){
   a_factors = factor(a);
   b_factors = factor(b);
   limit = min(a, b);
   i = 2;
   while({ i <= limit }, {
      if(a_factors.i? && b_factors.i?, {
         lcm = i * min(a_factors.i?, b_factors.i?);
         a = a / lcm;
         b = b / lcm;
      })
      i = i + 1;
   })
   [a, b]
};

Fraction = class(){
   __init = func(numer, denom){
      lcm = factor_out(numer, denom);
      __self.numer = lcm.0;
      __self.denom = lcm.1;
   };

   __text = func(){ "" + __self.numer + "/" + __self.denom };
   __num = func(){ __self.numer / __self.denom }
   __neg = func(){ Fraction(__self.numer * NEG_1, __self.denom) }

   __add = func(other){
      if(other.__class == Fraction, {
         if(__self.denom == other.denom, {
            Fraction(__self.numer + other.numer,
                     __self.denom)
         }, {
            Fraction(__self.numer * other.denom + other.numer * __self.denom,
                     __self.denom * other.denom)
         })
      }, {
         Fraction(__self.numer + other * __self.denom, __self.denom)
      })!.0
   };

   __sub = func(other){
      __self + if(other.__class == Fraction, { other.__neg() }, { 0 - other })!.0
   }
   __mul = func(other){
      if(other.__class == Fraction, { 
         Fraction(__self.numer * other.numer, __self.denom * other.denom)
      }, {
         Fraction(__self.numer * other, __self.denom)
      })!.0
   }
   __div = func(other){
      if(other.__class == Fraction, {
         Fraction(__self.numer * other.denom, __self.denom * other.numer)
      }, { 
         Fraction(__self.numer / other, __self.denom / other)
      })!.0
   };
};


// frac = Fraction(2, 5);
// disp(frac);
// disp(frac.__class);
// // disp(frac + 3 - Fraction(2, 5));








