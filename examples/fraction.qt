#[include(*Builtins, *Operators, *Plugins)]

factor = func(inp){
   ret = [ ];
   ret.(inp + 1) = null;
   ret.0 = null;
   ret.1 = null;
   i = 2;
   while_fn({1 < inp }, {
      if_fn(inp % i == 0, {
         ret.(i) = (ret.(i) || 0) + 1;
         inp = inp / i;
      }, {
         i = i + 1;
      });
   });
   ret
};

min = func(a, b){
   if_fn(a < b, a, b)
};

factor_out = func(l, r){
   l_factors = factor(l);
   r_factors = factor(r);
   limit = min(l, r);
   i = 2;
   while_fn({ i <= limit }, {
      if_fn(l_factors.(i) && r_factors.(i), {
         lcm = i * min(l_factors.(i), r_factors.(i));
         l = l / lcm;
         r = r / lcm;
      });
      i = i + 1;
   });
   [l, r]
};

Fraction = class(){
   __init = func(n, d){
      lcm = factor_out(n, d);
      __self.n = lcm.0;
      __self.d = lcm.1;
   };

   __text = func(){
      if_fn(__self.d == 1,
            "" + __self.n, 
            "" + __self.n + "/" + __self.d
      )
   };
   __num = func(){ __self.n / __self.d };
   __neg = func(){ Fraction(__self.n * NEG_1, __self.d) };

   __add = func(other){
      if_fn(other.__class == Fraction, {
         if_fn(__self.d == other.d, {
            Fraction(__self.n + other.n, __self.d)
         }, {
            Fraction(__self.n * other.d + other.n * __self.d, __self.d * other.d)
         })
      }, {
         Fraction(__self.n + other * __self.d, __self.d)
      })
   };

   __sub = func(other){
      __self + if_fn(other.__class == Fraction, other.__neg(), 0 - other)
   };

   __mul = func(other){
      if_fn(other.__class == Fraction, {
         Fraction(__self.n * other.n, __self.d * other.d)
      }, {
         Fraction(__self.n * other, __self.d)
      })
   };
   __div = func(other){
      if_fn(other.__class == Fraction, {
         Fraction(__self.n * other.d, __self.d * other.n)
      }, {
         Fraction(__self.n / other, __self.d / other)
      })
   };
};


frac = Fraction(2, 5);
frac2 = Fraction(3, 5);
disp('frac:', frac);
disp('frac+1:', frac + frac2);
// disp(frac.__class);
// // disp(frac + 3 - Fraction(2, 5));












