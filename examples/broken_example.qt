#[include(*Builtins, *Operators, *Plugins)]
import('opers.qt', true); 

factor = func(inp){
   ret = [ ];
   ret.(inp + 1) = null;
   ret.0 = null;
   ret.1 = null;
   i = 2;
   while_ { 1 < inp } do {
      if_ (inp % i == 0) do {
         ret.(i) = (ret.(i) || 0) + 1;
         inp = inp / i;
      } else {
         i = i + 1;
      }
   };
   ret
};

min = func(a, b){
   a < b ? a : b
};

factor_out = func(a, b){
   a_factors = factor(a);
   b_factors = factor(b);
   limit = min(a, b);
   i = 2;
   while_ { i <= limit } do {
      if_(a_factors.(i) && b_factors.(i)) do {
         lcm = i * min(a_factors.(i), b_factors.(i));
         a = a / lcm;
         b = b / lcm;
      };
      i = i + 1;
   };
   [a, b]
};

Fraction = class(){
   __init = func(n, d){
      lcm = factor_out(n, d);
      __self.n = lcm.0;
      __self.d = lcm.1;
   };

   __text = func(){ "" + __self.n + "/" + __self.d };
   __num = func(){ __self.n / __self.d };
   __neg = func(){ Fraction(__self.n * NEG_1, __self.d) };

   __add = func(other){
      if_ (other.__class == Fraction) do {
         if_ (__self.d == other.d) do {
            Fraction(__self.n + other.n, __self.d)
         } else {
            Fraction(__self.n * other.d + other.n * __self.d, __self.d * other.d)
         }
      } else {
         Fraction(__self.n + other * __self.d, __self.d)
      }
   };

   __sub = func(other){
      __self + (other.__class == Fraction ? other.__neg() : 0 - other)
   };
   __mul = func(other){
      if_ (other.__class == Fraction) do {
         Fraction(__self.n * other.n, __self.d * other.d)
      } else {
         Fraction(__self.n * other, __self.d)
      }
   };
   __div = func(other){
      if_ (other.__class == Fraction) do {
         Fraction(__self.n * other.d, __self.d * other.n)
      } else {
         Fraction(__self.n / other, __self.d / other)
      }
   };
};


frac = Fraction(2, 5);
disp(frac);
disp(frac + (1))
// disp(frac.__class);
// // disp(frac + 3 - Fraction(2, 5));












